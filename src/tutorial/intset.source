CREATE FUNCTION intset_in(cstring)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;


CREATE FUNCTION intset_out(intset)
   RETURNS cstring
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE TYPE intset (
   internallength = VARIABLE,
   input = intset_in,
   output = intset_out
);

-- operate functions
-- in
CREATE FUNCTION intset_ein(integer, intset)
   RETURNS bool
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR ? (
   leftarg = integer, rightarg = intset, procedure = intset_ein
);

-- cardinality
CREATE FUNCTION intset_card(intset)
   RETURNS integer
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR # (
   rightarg = intset, procedure = intset_card
);

-- contain
CREATE FUNCTION intset_contain(intset, intset)
   RETURNS bool
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR >@ (
   leftarg = intset, rightarg = intset, procedure = intset_contain
);

-- subset
CREATE FUNCTION intset_subset(intset, intset)
   RETURNS bool
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR @< (
   leftarg = intset, rightarg = intset, procedure = intset_subset
);

-- equal
CREATE FUNCTION intset_equal(intset, intset)
   RETURNS bool
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR = (
   leftarg = intset, rightarg = intset, procedure = intset_equal
);

-- not equal
CREATE FUNCTION intset_notequal(intset, intset)
   RETURNS bool
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR <> (
   leftarg = intset, rightarg = intset, procedure = intset_notequal
);

-- intersection
CREATE FUNCTION intset_intersection(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR && (
   leftarg = intset, rightarg = intset, procedure = intset_intersection
);

-- union
CREATE FUNCTION intset_union(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR || (
   leftarg = intset, rightarg = intset, procedure = intset_union
);

-- xor
CREATE FUNCTION intset_xor(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR !! (
   leftarg = intset, rightarg = intset, procedure = intset_xor
);

-- difference
CREATE FUNCTION intset_diff(intset, intset)
   RETURNS intset
   AS '_OBJWD_/intset'
   LANGUAGE C IMMUTABLE STRICT;

CREATE OPERATOR - (
   leftarg = intset, rightarg = intset, procedure = intset_diff
);
        
--
-- test

CREATE TABLE test_intset (
	a	intset
);

INSERT INTO test_intset VALUES ('{1,2}');
INSERT INTO test_intset VALUES ('{1,2,3}');

SELECT * FROM test_intset;

-- clean up the example
DROP TABLE test_intset;
DROP TYPE intset CASCADE;
